from aiogram import Router, F
from aiogram.types import Message
from aiogram.filters import Command
from aiogram.filters.state import State, StatesGroup, StateFilter
from aiogram.fsm.context import FSMContext

from bot.filters import Admin
from bot import keyboards
from bot import bot

from utils.session import Account
import data

from asyncio import sleep

router = Router()


@router.message(Admin(), StateFilter(None), Command('start'))
async def _start(message: Message):
    await message.answer(
        text=
            "<b>–°–ø–∏—Å–æ–∫ –∫–æ–º–º–∞–Ω–¥:</b>\n\n"+
            "‚ñ∂Ô∏è –ó–∞–ø—É—Å—Ç–∏—Ç—å - <i>–∑–∞–ø—É—Å–∫ –∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏—è</i>\n\n"+
            "‚èπ –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å - <i>–æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ</i>\n\n"+
            "‚ûï –î–æ–±–∞–≤–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç - <i>–¥–æ–±–∞–≤–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç</i>",
        parse_mode="HTML",
        reply_markup=keyboards.start()
    )

@router.message(Admin(), StateFilter(None), F.text=="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ")
async def _append(message: Message, state: FSMContext):
    await state.clear()
    data.CODE_INPUT=None
    data.CODE_WAIT=True
    data.TFA=None
    await message.answer(
        text=
            "<b>–°–ø–∏—Å–æ–∫ –∫–æ–º–º–∞–Ω–¥:</b>\n\n"+
            "‚ñ∂Ô∏è –ó–∞–ø—É—Å—Ç–∏—Ç—å - <i>–∑–∞–ø—É—Å–∫ –∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏—è</i>\n\n"+
            "‚èπ –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å - <i>–æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ</i>\n\n"+
            "‚ûï –î–æ–±–∞–≤–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç - <i>–¥–æ–±–∞–≤–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç</i>",
        parse_mode="HTML",
        reply_markup=keyboards.start()
    )

@router.message(Admin(), StateFilter(None), F.text=="‚ñ∂Ô∏è –ó–∞–ø—É—Å—Ç–∏—Ç—å")
async def start_commenting(message: Message):
    if data.isBlockedComm:
        await message.answer(
            "<b><i>–ö–æ–º–º–µ–Ω—Ç–∏–Ω–≥ —É–∂–µ –∑–∞–ø—É—â–µ–Ω !</i></b>",
            parse_mode="HTML"
        )
    else:
        data.isBlockedComm=True
        await message.answer(
            "<b><i>–ó–∞–ø—É—Å–∫ –∫–æ–º–º–µ–Ω—Ç–∏–Ω–≥–∞...</i></b>",
            parse_mode="HTML"
        )

        clients = []
        clients_error = {}
        config = data.read_setting()['Setting_account']
        for session in data.init_sessions():
            client = Account(name=session)
            if await client.check_account():
                setting = await client.start(config=config)
                if setting!=False:
                    clients.append(client)
                    await message.answer(
                        text=
                            f"{client.name} –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:\n\n"+
                            f"–ó–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π - {setting.sleep} —Å–µ–∫—É–Ω–¥\n\n"+
                            f"–ü—Ä–æ–ø—É—Å–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —á–∞—Ç–∞—Ö - {setting.skip_msg}\n\n"+
                            f"–ü—Ä–æ–ø—É—Å–∫ –ø–æ—Å—Ç–æ–≤ - {setting.skip_post}\n\n"+
                            f"–ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏ - {setting.skip_timeframe} —Å–µ–∫—É–Ω–¥\n\n"+
                            f"–†–∞–±–æ—á–µ–µ –≤—Ä–µ–º—è - c {setting.work_time} —á–∞—Å–æ–≤\n\n"+
                            f"–≠–º–æ–¥–∂–∏ - {setting.emodji}\n\n"
                    )
                else:
                    clients_error[session]="—Å–µ—Å—Å–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ !"
            else:
                clients_error[session]="—Å–µ—Å—Å–∏—è –Ω–µ –∏–¥–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω–∞ !"

        text = f"–û—Ç—á–µ—Ç –æ –∑–∞–ø—É—Å–∫–µ:\n\n–ó–∞–ø—É—â–µ–Ω–æ - <b>{len(clients)}</b> –∏–∑ <b>{len(clients)+len(clients_error)}</b>\n\n"
        if len(clients_error)==0:
            text = text+"–°–ø—Ä–∞–≤–∫–∞ –æ–± –∞–∫–∫–∞—É–Ω—Ç–∞—Ö —Å –æ—à–∏–±–∫–∞–º–∏: <b>None</b>"
        else:
            text = text+"–°–ø—Ä–∞–≤–∫–∞ –æ–± –∞–∫–∫–∞—É–Ω—Ç–∞—Ö —Å –æ—à–∏–±–∫–∞–º–∏:\n\n"
            for client in clients_error:
                text = text + f"{client} - {clients_error[client]}\n"
        await message.answer(
            text = text,
            parse_mode="HTML"
        )

        await bot.message_for_admins("‚úÖ <b><i>COMMENTING ON</i></b>")

        data.COMMENTING=True
        while data.COMMENTING:
            await sleep(1)
        
        for client in clients:
            await client.stop_account()
        await bot.message_for_admins("üõë <b><i>COMMENTING OFF</i></b>")
        data.isBlockedComm=False
        
        
        


@router.message(Admin(), StateFilter(None), F.text=="‚èπ –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å")
async def stop_commenting(message: Message):
    if data.COMMENTING:
        data.COMMENTING = False
        await message.answer(
            "<b><i>–û—Ç–∫–ª—é—á–µ–Ω–∏–µ –∫–æ–º–º–µ–Ω—Ç–∏–Ω–≥–∞...</i></b>",
            parse_mode="HTML"
        )
    else:
        await message.answer(
            "<b><i>–ö–æ–º–º–µ–Ω—Ç–∏–Ω–≥ —É–∂–µ –≤—ã–∫–ª—é—á–µ–Ω !</i></b>",
            parse_mode="HTML"
        )

@router.message(Admin(), StateFilter(None), F.text=="‚öôÔ∏è –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
async def setting_account(message: Message):
    setting = data.read_setting()["Setting_account"]
    await message.answer(
        text=
            f"–ó–∞–¥–µ—Ä–∂–∫–∞ <b>–•</b> –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π —Å–æ–æ–±—â–µ–Ω–∏—è = –æ—Ç <b>{setting['sleep_start']}</b> –¥–æ <b>{setting['sleep_end']}</b> —Å–µ–∫—É–Ω–¥ <i>(–≤—ã–±–∏—Ä–∞–µ—Ç—Å—è —Ä–∞–Ω–¥–æ–º–Ω–æ)</i>",
        parse_mode="HTML",
        reply_markup=keyboards.setting_sleep()
    )
    await message.answer(
        text=
            f"–û—Å—Ç–∞–≤–ª—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏ –∫–∞–∂–¥–æ–º <b>–•</b> –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏ –≤ —á–∞—Ç–µ/–≥—Ä—É–ø–ø–µ = –æ—Ç <b>{setting['skip_msg_start']}</b> –¥–æ <b>{setting['skip_msg_end']}</b> <i>(–≤—ã–±–∏—Ä–∞–µ—Ç—Å—è —Ä–∞–Ω–¥–æ–º–Ω–æ)</i>",
        parse_mode="HTML",
        reply_markup=keyboards.setting_skip_msg()
    )
    await message.answer(
        text=
            f"–û—Å—Ç–∞–≤–ª—è—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –∫ –∫–∞–∂–¥–æ–º—É <b>–•</b> –ø–æ—Å—Ç—É = –æ—Ç <b>{setting['skip_post_start']}</b> –¥–æ <b>{setting['skip_post_end']}</b> <i>(–≤—ã–±–∏—Ä–∞–µ—Ç—Å—è —Ä–∞–Ω–¥–æ–º–Ω–æ)</i>",
        parse_mode="HTML",
        reply_markup=keyboards.setting_skip_post()
    )
    await message.answer(
        text=
            f"–ü—Ä–æ–º–µ–∂—É—Ç–æ–∫ –º–µ–∂–¥—É –æ—Ç–ø—Ä–∞–≤–∫–æ–π —Å–æ–æ–±—â–µ–Ω–∏–π = –æ—Ç <b>{setting['skip_timeframe_start']}</b> –¥–æ <b>{setting['skip_timeframe_end']}</b> —Å–µ–∫—É–Ω–¥ <i>(–≤—ã–±–∏—Ä–∞–µ—Ç—Å—è —Ä–∞–Ω–¥–æ–º–Ω–æ)</i>",
        parse_mode="HTML",
        reply_markup=keyboards.setting_skip_timeframe()
    )
    await message.answer(
        text=
            f"–†–∞–±–æ—á–µ–µ –≤—Ä–µ–º—è –∞–∫–∫–∞—É–Ω—Ç–∞ = c <b>{setting['work_time_start']}</b> –¥–æ <b>{setting['work_time_end']}</b> —á–∞—Å–æ–≤ –ø–æ –ú–°–ö",
        parse_mode="HTML",
        reply_markup=keyboards.setting_work_time()
    )
    await message.answer(
        text=
            f"–û—Å—Ç–∞–≤–ª—è—Ç—å —ç–º–æ–¥–∑–∏, –µ—Å–ª–∏ –≤ –ø–æ—Å—Ç–µ –Ω–µ—Ç —Ç–µ–∫—Å—Ç–∞ = <b>{setting['emodji']}</b>",
        parse_mode="HTML",
        reply_markup=keyboards.setting_emodji()
    )